<?php

namespace Blogger\BlogBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * BlogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BlogRepository extends EntityRepository
{
    /**
     * @param null $limit Limit of blogs to fetch
     * @return array of type { {blog0,numberOfComments0}, .....}
     */
    public function getLatestBlogs($limit = null) {
         /*
           select blog.id, title, COUNT(DISTINCT comment.id)
            from blog left join comment on
            blog.id = comment.blog_id
            group by blog.id
         */

        $qb = $this->getEntityManager()
            ->createQuery(
            'SELECT b as blog, COUNT(DISTINCT comment.id) numberOfComments
              FROM BloggerBlogBundle:Blog b LEFT JOIN BloggerBlogBundle:Comment comment
              WITH b.id = comment.blog
              GROUP BY b.id'
        );

        if(!is_null($limit)) {
            $qb->setMaxResults($limit);
        }

        return $qb->getResult();

    }

    /**
     * Method returs previous blog of blog with id $id
     * @param $id Id of current blog
     * @return mixed|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getPreviousBlog($id) {
        $qb = $this->createQueryBuilder('b')
            ->select('b')
            ->where('b.id < :blogId')
            ->addOrderBy('b.id','DESC')
            ->setParameter('blogId',$id)
            ->setMaxResults(1);

        try {
            $result =  $qb ->getQuery()
                            ->getSingleResult();
        }catch (NoResultException $ex) {
            return null;
        }

        return $result;

    }

    public function getNextBlog($id) {
        $qb = $this->createQueryBuilder('b')
            ->select('b')
            ->where('b.id > :blogId')
            ->addOrderBy('b.id','ASC')
            ->setParameter('blogId',$id)
            ->setMaxResults(1);

        try {
            $result =  $qb ->getQuery()
                ->getSingleResult();
        }catch (NoResultException $ex) {
            return null;
        }

        return $result;
    }
}
