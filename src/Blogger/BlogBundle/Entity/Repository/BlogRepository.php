<?php

namespace Blogger\BlogBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * BlogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BlogRepository extends EntityRepository
{
    /**
     * @param null $limit Limit of blogs to fetch
     * @return array of type { {blog0,numberOfComments0}, .....}
     */
    public function getLatestBlogs($limit = null) {

        $qb = $this->createQueryBuilder('b')
            ->select('b, c')
            ->leftJoin('b.comments', 'c')
            ->addOrderBy('b.created', 'DESC');

        if (false === is_null($limit))
            $qb->setMaxResults($limit);

        return $qb->getQuery()
            ->getResult();

    }

    public function getByCategory($category) {
        //get category ids from names
        $categories = $this
            ->getEntityManager()
            ->getRepository('BloggerBlogBundle:Category')
            ->getCategories($category);

        $i = 0;
        $category_array = array();
        foreach ($categories as $cat) {
            $category_array[$i] = $cat->getId();
            $i++;
        }
        //get blog ids from category ids
        //select distinct blog_id from blog_categories where category_id in (:ids);
        $rsm = new ResultSetMapping();
        $rsm->addEntityResult('BloggerBlogBundle:Blog', 'b');
        $rsm->addFieldResult('b', 'blog_id', 'id');
        $rsm->addFieldResult('b', 'title', 'title');
        $rsm->addFieldResult('b', 'author', 'author');
        $rsm->addFieldResult('b', 'blog', 'blog');
        $rsm->addFieldResult('b', 'slug', 'slug');
        $rsm->addFieldResult('b', 'tags', 'tags');

        //TODO: map image file
        $query = $this->getEntityManager()
            ->createNativeQuery(
                'select distinct blog_id, title, author, blog, slug, tags from blog_categories join blog on blog_id = id where category_id in(:ids);', $rsm);

        $query->setParameter('ids', $category_array);
        $blogIds = $query->getResult();

        return $blogIds;
    }
    /**
     * Method returs previous blog of blog with id $id
     * @param $id Id of current blog
     * @return mixed|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getPreviousBlog($id) {
        $qb = $this->createQueryBuilder('b')
            ->select('b')
            ->where('b.id < :blogId')
            ->addOrderBy('b.id','DESC')
            ->setParameter('blogId',$id)
            ->setMaxResults(1);

        try {
            $result =  $qb ->getQuery()
                            ->getSingleResult();
        }catch (NoResultException $ex) {
            return null;
        }

        return $result;

    }

    public function getNextBlog($id) {
        $qb = $this->createQueryBuilder('b')
            ->select('b')
            ->where('b.id > :blogId')
            ->addOrderBy('b.id','ASC')
            ->setParameter('blogId',$id)
            ->setMaxResults(1);

        try {
            $result =  $qb ->getQuery()
                ->getSingleResult();
        }catch (NoResultException $ex) {
            return null;
        }

        return $result;
    }

    public function getTags() {
        $blogTags = $this->createQueryBuilder('b')
            ->select('b.tags')
            ->getQuery()
            ->getResult();

        $tags = array();

        foreach ($blogTags as $blogTag) {
            $tags = array_merge(explode(',',$blogTag['tags']),$tags);
        }

        foreach ($tags as &$tag)
        {
            $tag = trim($tag);
        }

        return $tags;
    }

    public function getTagWeights($tags)
    {
        $tagWeights = array();
        if (empty($tags))
            return $tagWeights;

        foreach ($tags as $tag)
        {
            $tagWeights[$tag] = (isset($tagWeights[$tag])) ? $tagWeights[$tag] + 1 : 1;
        }
        // Shuffle the tags
        uksort($tagWeights, function() {
            return rand() > rand();
        });

        $max = max($tagWeights);

        // Max of 5 weights
        $multiplier = ($max > 5) ? 5 / $max : 1;
        foreach ($tagWeights as &$tag)
        {
            $tag = ceil($tag * $multiplier);
        }

        return $tagWeights;
    }
}
